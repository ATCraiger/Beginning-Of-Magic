<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Character Variables
//
//Leveling Data
currentLevel = 0;
currentXP = 0;
maxXP = (currentLevel * 25);

//Character Information
firstName = "";
lastName = "";
age = "";
knowsMagic = false;

//Combat Info
maxHealth = (10 + currentLevel);
currentHealth = maxHealth;
maxStamina = (100 + currentLevel);
currentStamina = maxStamina;
staminaRecovery = .25;
weaponDamage = 5;
damageOut = weaponDamage * (currentStamina/maxStamina);
empoweredAttack = false; //When the player does a perfect attack
isDefending = false; //Can block attack for others. While defending, damage drains health and stamina. Stamina also recovers slower
hasBadAim = true; //If they get a perfect focused attack
tempAT = "Focused"; //If they can attack with both, this is changed

//Weapon Info, all pulled from file and saved here. Only changed when changing weapons
weaponSprite = "";
weaponName = "";
weaponAT = "";
weaponDamage = 5;
weaponET = "";

//Movement Info
playerSpeed = 3.5;
originalPlayerSpeed = playerSpeed;
playerRunSpeed = 6;
battleMoveSpeed = 2.5;
canMove = true;
globalvar myDir;
myDir = 0;

//Sprite Control
image_speed = 0;

//Transitioning Info
battleRoom = "";
enemyID = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn Enemies &amp; Player 2 In Battle
instance_create(500, 500, enemyID);
instance_create(100, 100, playerParty[1]); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Outside of Battle Movement
        //Just Sara//
if(gamepad_is_connected(0) &amp;&amp; !inCombat &amp;&amp; partyCanMove)
{
    gamepad_set_axis_deadzone(0, .1);
    //leftStickThreshhold
    lst = .2;
    
    leftStickHoriz = gamepad_axis_value(0, gp_axislh);
    leftStickVert = gamepad_axis_value(0, gp_axislv);

    if(leftStickHoriz &gt; lst) //Walk left
    {
        x -= (leftStickHoriz * -playerSpeed);
        sprite_index = sprSaraWalkRight;
        image_index += leftStickHoriz / 3;
        myDir = 90;
    }
    if(leftStickHoriz &lt; -lst) //Walk right
    {
        x -= (leftStickHoriz * -playerSpeed);
        sprite_index = sprSaraWalkLeft;
        image_index -= leftStickHoriz / 3;
        myDir = 270;
    }   
    if(leftStickVert &gt; lst) //Walk Down
    {
        y -= (leftStickVert * -playerSpeed);
        sprite_index = sprSaraWalkDown;
        image_index += leftStickVert / 3;
        myDir = 180;
    }
    if(leftStickVert &lt; -lst) //Walk Up
    {
        y -= (leftStickVert * -playerSpeed);
        sprite_index = sprSaraWalkUp;
        image_index -= leftStickVert / 3;
        myDir = 0;
    }
    //Run
    if(gamepad_button_check(0, gp_stickl)) {
        playerSpeed = playerRunSpeed;
    }
    if((abs(leftStickVert) &lt; lst)  &amp;&amp; (abs(leftStickHoriz) &lt; lst) &amp;&amp; (playerSpeed == playerRunSpeed)){
        playerSpeed = originalPlayerSpeed;
    }
}

            ///Full Party on Screen
/*
if(gamepad_is_connected(0) &amp;&amp; !inCombat &amp;&amp; partyCanMove) {
    gamepad_set_axis_deadzone(0, .1);
    lst = .2;
    
    leftStickHoriz = gamepad_axis_value(0, gp_axislh);
    leftStickVert = gamepad_axis_value(0, gp_axislv);
    
    //Party Walks Right
    if(leftStickHoriz &lt; -lst) {
        partySize = array_length_1d(playerParty);
        for(i = 0; i &lt; partySize; ++i) {
            if((i + 1) &lt; partySize) {
                playerParty[i + 1].currentAnim = playerParty[i].currentAnim;
                playerParty[i + 1].sprite_index = playerParty[i + 1].myAnims[currentAnim];
                playerParty[i + 1].image_index += leftStickHoriz / 3;
                playerParty[i + 1].x -= (leftStickHoriz * -playerSpeed);
            }
        }
        playerParty[0].sprite_index = playerParty[0].myAnims[0];
        playerParty[0].image_index += leftStickHoriz/3;
        playerParty[0].x -= (leftStickHoriz * -playerSpeed);
        playerParty[0].currentAnim = 0;
    }
    //Party Walks Up
    if(leftStickVert &gt; lst) {
        partySize = array_length_1d(playerParty);
        for(i = 0; i &lt; partySize; ++i) {
            if((i + 1) &lt; partySize) {
                playerParty[i + 1].currentAnim = playerParty[i].currentAnim;
                playerParty[i + 1].sprite_index = playerParty[i + 1].myAnims[currentAnim];
                playerParty[i + 1].image_index += leftStickVert / 3;
                playerParty[i + 1].y -= (leftStickVert * -playerSpeed);
            }
        }
        playerParty[0].sprite_index = playerParty[0].myAnims[1];
        playerParty[0].image_index += leftStickVert/3;
        playerParty[0].y -= (leftStickVert * -playerSpeed);
        playerParty[0].currentAnim = 1;
    }
    //Party Walks Left
    if(leftStickHoriz &gt; lst) {
        partySize = array_length_1d(playerParty);
        for(i = 0; i &lt; partySize; ++i) {
            if((i + 1) &lt; partySize) {
                playerParty[i + 1].currentAnim = playerParty[i].currentAnim;
                playerParty[i + 1].sprite_index = playerParty[i + 1].myAnims[currentAnim];
                playerParty[i + 1].image_index += leftStickHoriz / 3;
                playerParty[i + 1].x -= (leftStickHoriz * -playerSpeed);
            }
        }
        playerParty[0].sprite_index = playerParty[0].myAnims[2];
        playerParty[0].image_index += leftStickHoriz/3;
        playerParty[0].x -= (leftStickHoriz * -playerSpeed);
        playerParty[0].currentAnim = 2;
    }
    //Party Walks Down
    if(leftStickVert &lt; -lst) {
        partySize = array_length_1d(playerParty);
        for(i = 0; i &lt; partySize; ++i) {
            if((i + 1) &lt; partySize) {
                playerParty[i + 1].currentAnim = playerParty[i].currentAnim;
                playerParty[i + 1].sprite_index = playerParty[i + 1].myAnims[currentAnim];
                playerParty[i + 1].image_index += leftStickVert / 3;
                playerParty[i + 1].y -= (leftStickVert * -playerSpeed);
            }
        }
        playerParty[0].sprite_index = playerParty[0].myAnims[3];
        playerParty[0].image_index += leftStickVert/3;
        playerParty[0].y -= (leftStickVert * -playerSpeed);
        playerParty[0].currentAnim = 3;
    }
}
/*
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Energy Recharging
if(inCombat)
{
    currentStamina = clamp(currentStamina, 0, maxStamina);
    currentStamina += staminaRecovery;
}
//Restore stamina outside of battle
if(!inCombat)
    currentStamina = maxStamina;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu Screens
if(gamepad_button_check(0, gp_start)) {
    if(partyCanMove &amp;&amp; !inCombat) { //Enter Main Menu
        inCharacterScreen = true;
        partyCanMove = false;
    }
}

//Exit Menu From Anywhere
if(gamepad_button_check(0, gp_select)) {
    inCharacterScreen = false;
    partyCanMove = true;
}

//Choosing a character in the character screen depending on partySize
if(inCharacterScreen &amp;&amp; partySize == 1) { //Party size of 1

}
if(inCharacterScreen &amp;&amp; partySize == 2) { //Party size of 2
    if(gamepad_button_check(0, gp_padd) &amp;&amp; characterScreenSelection == 0) { //Choosing down while on first character
        characterScreenSelection = 1;
    }
    else if(gamepad_button_check(0, gp_padu) &amp;&amp; characterScreenSelection == 1) { //Choosing up on second character
        characterScreenSelection = 0;
    }
}
if(inCharacterScreen &amp;&amp; partySize == 3) { //Party size of 3
    if(gamepad_button_check(0, gp_padd) &amp;&amp; characterScreenSelection == 0) { //Choosing down while on first character
        characterScreenSelection = 1;
    }
    if(gamepad_button_check(0, gp_padu) &amp;&amp; characterScreenSelection == 1) { //Choosing up on second character
        characterScreenSelection = 0;
    }
    if(gamepad_button_check(0, gp_padr) &amp;&amp; characterScreenSelection == 0) { //Choosing right on first character
        characterScreenSelection = 2;
    }
    if(gamepad_button_check(0, gp_padl) &amp;&amp; characterScreenSelection == 2) { //Choosing left on third character
        characterScreenSelection = 0;
    }
}
if(inCharacterScreen &amp;&amp; partySize == 4) { //Party size of 4
    if(gamepad_button_check(0, gp_padd) &amp;&amp; characterScreenSelection == 0) { //Choosing down while on first character
        characterScreenSelection = 1;
    }
    if(gamepad_button_check(0, gp_padu) &amp;&amp; characterScreenSelection == 1) { //Choosing up on second character
        characterScreenSelection = 0;
    }
    if(gamepad_button_check(0, gp_padd) &amp;&amp; characterScreenSelection == 2) { //Choosing down while on third character
        characterScreenSelection = 3;
    }
    if(gamepad_button_check(0, gp_padr) &amp;&amp; characterScreenSelection == 0) { //Choosing right on first character
        characterScreenSelection = 2;
    }
    if(gamepad_button_check(0, gp_padr) &amp;&amp; characterScreenSelection == 1) { //Choosing right on second character
        characterScreenSelection = 3;
    }
    if(gamepad_button_check(0, gp_padu) &amp;&amp; characterScreenSelection == 3) { //Choosing up on fourth character
        characterScreenSelection = 2;
    }
    if(gamepad_button_check(0, gp_padl) &amp;&amp; characterScreenSelection == 2) { //Choosing left on third character
        characterScreenSelection = 0;
    }
    if(gamepad_button_check(0, gp_padl) &amp;&amp; characterScreenSelection == 3) { //Choosing left on fourth character
        characterScreenSelection = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Better Collisions
/*
if(myDir == 0) {
    if(!place_free(x - 32, y)) {
        x = x;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Engage in dialogue
if(myDir == 0 &amp;&amp; !isTalking) {
    if(collision_line(x, y, x, y - 30, objNPCParent, false, true) != noone) {
        if(gamepad_button_check(0, gp_face1) &amp;&amp; !isTalking) {
            talkingObject = collision_line(x, y, x, y - 30, objNPCParent, false, true);
            scrStartDialogue(self.id.object_index, talkingObject);
        }
    }
}
if(myDir == 90 &amp;&amp; !isTalking) {
    if(collision_line(x, y, x + 30, y, objNPCParent, false, true) != noone) {
        if(gamepad_button_check(0, gp_face1) &amp;&amp; !isTalking) {
            talkingObject = collision_line(x, y, x + 30, y, objNPCParent, false, true);
            scrStartDialogue(self.id.object_index, talkingObject);
        }
    }
}
if(myDir == 180 &amp;&amp; !isTalking) {
    if(collision_line(x, y, x, y + 30, objNPCParent, false, true) != noone) {
        if(gamepad_button_check(0, gp_face1) &amp;&amp; !isTalking) {
            talkingObject = collision_line(x, y, x, y + 30, objNPCParent, false, true);
            scrStartDialogue(self.id.object_index, talkingObject);
        }
    }
}
if(myDir == 270 &amp;&amp; !isTalking) {
    if(collision_line(x, y, x - 30, y, objNPCParent, false, true) != noone) {
        if(gamepad_button_check(0, gp_face1) &amp;&amp; !isTalking) {
            talkingObject = collision_line(x, y, x - 30, y, objNPCParent, false, true);
            scrStartDialogue(self.id.object_index, talkingObject);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objInvisWall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop Moving

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>115</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_bounce</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objInventoryParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pick up items

//Add to player inventory
nextSpot = scrNextEmptySpot(playerInventory);
ds_grid_set(playerInventory, nextSpot, 0, other.name);
ds_grid_set(playerInventory, nextSpot, 1, other.sprite);
ds_grid_set(playerInventory, nextSpot, 2, other.description);

with(other)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objEnemyParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Begin Battle Steps
if(!inCombat)
{
    enemyID = other.id.object_index; //This stores the enemy object name (like objFly) into this variable
    
    //Destroy monster in original room
    with(other)
    {
        instance_destroy();
    }
    
    inCombat = true;
    
    //Decide which battle room to go to
    battleRoom = rmTestCombat;
    room_goto(battleRoom);
    
    //Set alarm to spawn enemies
    alarm[0] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Menu Screens
if(inCharacterScreen) {
    draw_sprite(sprCharacterScreen, 0, 0, 0);
    //First Player
    draw_sprite_ext(playerParty[0].myImage, 0, 310, 303, 3, 3, 0, c_white, 1);
    draw_text(400, 275, playerParty[0].firstName);
    
    //Second Player
    if(playerParty[1] != null) {
        draw_sprite_ext(playerParty[1].myImage, 0, 310, 715, 3, 3, 0, c_white, 1);
        draw_text(400, 715, playerParty[1].firstName);
    }
    //Third Player
    if(playerParty[2] != null) {
        draw_sprite_ext(playerParty[2].myImage, 0, 1150, 275, 3, 3, 0, c_white, 1);
        draw_text(1265, 275, playerParty[2].firstName);
    }
    //Fourth Player
    if(playerParty[3] != null) {
        draw_sprite_ext(playerParty[3].myImage, 0, 1150, 715, 3, 3, 0, c_white, 1);
        draw_text(1265, 715, playerParty[3].firstName);
    }
    //Select Available Characters depending on character size
    if(partySize == 1) { //Party size of 1
        if(characterScreenSelection == 0) {
            draw_rectangle(200, 170, 400, 400, true);
        }
    }
    else if(partySize == 2) { //Party size of 2
        if(characterScreenSelection == 0) {
            draw_rectangle(200, 170, 400, 400, true);
        }
        else if(characterScreenSelection == 1) {
            draw_rectangle(200, 600, 400, 800, true);
        }
    }
    else if(partySize == 3) { //Party size of 3
        if(characterScreenSelection == 0) {
            draw_rectangle(200, 170, 400, 400, true);
        }
        else if(characterScreenSelection == 1) {
            draw_rectangle(200, 600, 400, 800, true);
        }
        else if(characterScreenSelection == 2) {
            draw_rectangle(1050, 200, 1265, 400, true);
        } 
    }
    else if(partySize == 4) { //Party size of 4
        if(characterScreenSelection == 0) {
            draw_rectangle(200, 170, 400, 400, true);
        }
        else if(characterScreenSelection == 1) {
            draw_rectangle(200, 600, 400, 800, true);
        }
        else if(characterScreenSelection == 2) {
            draw_rectangle(1050, 200, 1265, 400, true);
        } 
        else if(characterScreenSelection == 3) {
            draw_rectangle(1050, 570, 1265, 800, true);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
